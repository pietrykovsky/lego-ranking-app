version: "3.9"

services:
  backend:
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app/backend
      - static_volume:/app/backend/static_files
    env_file:
      - .env
    networks:
      - app-network
    depends_on:
      - db

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    env_file:
      - .env
    networks:
      - app-network
    ports:
      - "3000:3000"
    depends_on:
      - backend

  db:
    image: postgres:14-alpine
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    networks:
      - app-network

  celery:
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    command: celery -A api worker -l info
    volumes:
      - ./backend:/app/backend
    env_file:
      - .env
    networks:
      - app-network
    depends_on:
      - db
      - redis
      - backend

  beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    command: celery -A api beat -l info
    volumes:
      - ./backend:/app/backend
    env_file:
      - .env
    networks:
      - app-network
    depends_on:
      - celery

networks:
  app-network:
    driver: bridge

volumes:
  pgdata:
  static_volume: