services:
  backend:
    container_name: lego-ranking-backend
    restart: always
    build:
      context: ./backend
    ports:
      - "8000:8000"
    volumes:
      - django_static_files:/app/static_files
      - django_media_files:/app/media_files
    env_file:
      - .env
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # frontend:
  #   container_name: lego-ranking-frontend
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile.prod
  #   env_file:
  #     - .env
  #   networks:
  #     - app-network
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - static_volume:/app/frontend/build
  #   depends_on:
  #     backend:
  #       condition: service_healthy

  db:
    image: postgres:17-alpine
    container_name: lego-ranking-db
    volumes:
      - pgdata:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    networks:
      - app-network
    ports:
      - "5400:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    container_name: lego-ranking-redis
    image: redis:7-alpine
    expose:
      - 6379
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  celery:
    container_name: lego-ranking-celery
    restart: always
    build:
      context: ./backend
    command: celery -A core worker --concurrency=1 --max-tasks-per-child=1 -l info
    init: true
    volumes:
      - django_media_files:/app/media_files
    env_file:
      - .env
    networks:
      - app-network
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_started

  beat:
    container_name: lego-ranking-beat
    build:
      context: ./backend
    command: celery -A core beat -l info
    init: true
    env_file:
      - .env
    networks:
      - app-network
    depends_on:
      - celery

networks:
  app-network:
    driver: bridge

volumes:
  pgdata:
  static_volume:
  django_static_files:
  django_media_files:
